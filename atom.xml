<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Coder&#39;s Blog</title>
  <subtitle>有关计算机的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liuzhe6.github.io/"/>
  <updated>2017-01-30T03:30:34.095Z</updated>
  <id>http://liuzhe6.github.io/</id>
  
  <author>
    <name>刘哲</name>
    <email>miuiclub@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android将数据存储到文件中</title>
    <link href="http://liuzhe6.github.io/2017/01/19/Android%E5%B0%86%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%88%B0%E6%96%87%E4%BB%B6%E4%B8%AD/"/>
    <id>http://liuzhe6.github.io/2017/01/19/Android将数据存储到文件中/</id>
    <published>2017-01-19T02:27:48.000Z</published>
    <updated>2017-01-30T03:30:34.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android开发中存储文件"><a href="#Android开发中存储文件" class="headerlink" title="Android开发中存储文件"></a>Android开发中存储文件</h1><p>文件默认存储位置为 /data/data/<package name="">/files/目录下的<br>主要有两种模式可选，MODE_PRIVATE和MODE_APPEND。<br>MODE_PRIVATE：是默认操作模式，表示当指定同样文件名的时候，所写的内容会覆盖原文件中的内容。<br>MODE_APPEND：表示如果该文件已经存在，就往文件里面追加内容，不存在就创建新文件。</package></p>
<p>下面是一段简单的代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public void save()&#123;</div><div class="line">    String data = &quot;Data to save&quot;;</div><div class="line">    FileOutputStream out = null;</div><div class="line">    BufferedWriter writer = null;</div><div class="line">    try&#123;</div><div class="line">        out = openFileOutput(&quot;data&quot;, Context.MODE_PRIVATE);</div><div class="line">        writer = new BufferedWriter(new OutputStreamWriter(out));</div><div class="line">        writer.write(data);</div><div class="line">    &#125; catch (IOException e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; finally &#123;</div><div class="line">        try&#123;</div><div class="line">            if (writer != null)&#123;</div><div class="line">                writer.close();</div><div class="line">            &#125;</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android开发中存储文件&quot;&gt;&lt;a href=&quot;#Android开发中存储文件&quot; class=&quot;headerlink&quot; title=&quot;Android开发中存储文件&quot;&gt;&lt;/a&gt;Android开发中存储文件&lt;/h1&gt;&lt;p&gt;文件默认存储位置为 /data/data/&lt;
    
    </summary>
    
    
      <category term="Android" scheme="http://liuzhe6.github.io/tags/Android/"/>
    
      <category term="数据存储" scheme="http://liuzhe6.github.io/tags/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>XML简介</title>
    <link href="http://liuzhe6.github.io/2017/01/18/XML%E7%AE%80%E4%BB%8B/"/>
    <id>http://liuzhe6.github.io/2017/01/18/XML简介/</id>
    <published>2017-01-18T11:41:04.000Z</published>
    <updated>2017-01-19T02:29:02.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h1><h2 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h2><p>可扩展标记语言是一种很像超文本标记语言的标记语言。<br>它的设计宗旨是传输数据，而不是显示数据。<br>它的标签没有被预定义。您需要自行定义标签。<br>它被设计为具有自我描述性。<br>它是W3C的推荐标准。  </p>
<hr>
<h2 id="XML-树结构"><a href="#XML-树结构" class="headerlink" title="XML 树结构"></a>XML 树结构</h2><p>XML 文档形成了一种树结构，它从“根部”开始，然后扩展到“枝叶”。<br>一个 XML 文档实例<br>XML 使用简单的具有自我描述性的语法：<br><img src="XML简介/xml-1.png" alt="logo"><br>第一行是 XML 声明。它定义 XML 的版本 (1.0) 和所使用的编码 (ISO-8859-1 = Latin-1/西欧字符集)。<br>下一行描述文档的根元素（像在说：“本文档是一个便签”）：<br><code>&lt;note&gt;</code></p>
<p>接下来 4 行描述根的 4 个子元素（to, from, heading 以及 body）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">to&gt;George&lt;/to&gt;</div><div class="line">&lt;from&gt;John&lt;/from&gt;</div><div class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</div><div class="line">&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>最后一行定义根元素的结尾：<br><code>&lt;/note&gt;</code>  </p>
<p>从本例可以设想，该 XML 文档包含了 John 给 George 的一张便签。</p>
<p>XML 文档形成一种树结构<br>XML 文档必须包含根元素。该元素是所有其他元素的父元素。<br>XML 文档中的元素形成了一棵文档树。这棵树从根部开始，并扩展到树的最底端。<br>所有元素均可拥有子元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;root&gt;</div><div class="line">  &lt;child&gt;</div><div class="line">    &lt;subchild&gt;.....&lt;/subchild&gt;</div><div class="line">  &lt;/child&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure></p>
<p>父、子以及同胞等术语用于描述元素之间的关系。父元素拥有子元素。相同层级上的子元素成为同胞（兄弟或姐妹）。<br>所有元素均可拥有文本内容和属性（类似 HTML 中）。  </p>
<p>实例<br><img src="XML简介/xml-2.gif" alt="logo"> </p>
<p>上图表示下面的 XML 中的一本书：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;bookstore&gt;</div><div class="line">&lt;book category=&quot;COOKING&quot;&gt;</div><div class="line">  &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt; </div><div class="line">  &lt;author&gt;Giada De Laurentiis&lt;/author&gt; </div><div class="line">  &lt;year&gt;2005&lt;/year&gt; </div><div class="line">  &lt;price&gt;30.00&lt;/price&gt; </div><div class="line">&lt;/book&gt;</div><div class="line">&lt;book category=&quot;CHILDREN&quot;&gt;</div><div class="line">  &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt; </div><div class="line">  &lt;author&gt;J K. Rowling&lt;/author&gt; </div><div class="line">  &lt;year&gt;2005&lt;/year&gt; </div><div class="line">  &lt;price&gt;29.99&lt;/price&gt; </div><div class="line">&lt;/book&gt;</div><div class="line">&lt;book category=&quot;WEB&quot;&gt;</div><div class="line">  &lt;title lang=&quot;en&quot;&gt;Learning XML&lt;/title&gt; </div><div class="line">  &lt;author&gt;Erik T. Ray&lt;/author&gt; </div><div class="line">  &lt;year&gt;2003&lt;/year&gt; </div><div class="line">  &lt;price&gt;39.95&lt;/price&gt; </div><div class="line">&lt;/book&gt;</div><div class="line">&lt;/bookstore&gt;</div></pre></td></tr></table></figure></p>
<p>例子中的根元素是 <bookstore>。文档中的所有 <book> 元素都被包含在 <bookstore> 中。  </bookstore></book></bookstore></p>
<p><book> 元素有 4 个子元素：<title>、&lt; author&gt;、<year>、<price>。  </price></year></title></book></p>
<hr>
<h2 id="XML-语法规则"><a href="#XML-语法规则" class="headerlink" title="XML 语法规则"></a>XML 语法规则</h2><p>XML 的语法规则很简单，且很有逻辑。这些规则很容易学习，也很容易使用。<br>所有 XML 元素都须有关闭标签<br>在 HTML，经常会看到没有关闭标签的元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;This is a paragraph</div><div class="line">&lt;p&gt;This is another paragraph</div></pre></td></tr></table></figure></p>
<p>在 XML 中，省略关闭标签是非法的。所有元素都必须有关闭标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;This is a paragraph&lt;/p&gt;</div><div class="line">&lt;p&gt;This is another paragraph&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>XML 标签对大小写敏感<br>XML 元素使用 XML 标签进行定义。<br>XML 标签对大小写敏感。在 XML 中，标签 <letter> 与标签 <letter> 是不同的。<br>必须使用相同的大小写来编写打开标签和关闭标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Message&gt;这是错误的。&lt;/message&gt;</div><div class="line"></div><div class="line">&lt;message&gt;这是正确的。&lt;/message&gt;</div></pre></td></tr></table></figure></letter></letter></p>
<p>XML 必须正确地嵌套<br>在 HTML 中，常会看到没有正确嵌套的元素：<br><code>&lt;b&gt;&lt;i&gt;This text is bold and italic&lt;/b&gt;&lt;/i&gt;</code><br>在 XML 中，所有元素都必须彼此正确地嵌套：<br><code>&lt;b&gt;&lt;i&gt;This text is bold and italic&lt;/i&gt;&lt;/b&gt;</code><br>在上例中，正确嵌套的意思是：由于 <i> 元素是在 <b>   元素内打开的，那么它必须在 <b> 元素内关闭。  </b></b></i></p>
<p>XML 文档必须有根元素<br>XML 文档必须有一个元素是所有其他元素的父元素。该元素称为根元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;root&gt;</div><div class="line">  &lt;child&gt;</div><div class="line">    &lt;subchild&gt;.....&lt;/subchild&gt;</div><div class="line">  &lt;/child&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure></p>
<p>XML 的属性值须加引号<br>与 HTML 类似，XML 也可拥有属性（名称/值的对）。<br>在 XML 中，XML 的属性值须加引号。请研究下面的两个 XML 文档。第一个是错误的，第二个是正确的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;note date=08/08/2008&gt;</div><div class="line">&lt;to&gt;George&lt;/to&gt;</div><div class="line">&lt;from&gt;John&lt;/from&gt;</div><div class="line">&lt;/note&gt; </div><div class="line">&lt;note date=&quot;08/08/2008&quot;&gt;</div><div class="line">&lt;to&gt;George&lt;/to&gt;</div><div class="line">&lt;from&gt;John&lt;/from&gt;</div><div class="line">&lt;/note&gt;</div></pre></td></tr></table></figure></p>
<p>在第一个文档中的错误是，note 元素中的 date 属性没有加引号。 </p>
<p>实体引用<br>在 XML 中，一些字符拥有特殊的意义。<br>如果你把字符 “&lt;” 放在 XML 元素中，会发生错误，这是因为解析器会把它当作新元素的开始。<br>这样会产生 XML 错误：<br><code>&lt;message&gt;if salary &lt; 1000 then&lt;/message&gt;</code><br>为了避免这个错误，请用实体引用来代替 “&lt;” 字符：<br><code>&lt;message&gt;if salary &amp;lt; 1000 then&lt;/message&gt;</code><br>在 XML 中，有 5 个预定义的实体引用：<br><img src="XML简介/xml-3.png" alt="logo"></p>
<p>注释：在 XML 中，只有字符 “&lt;” 和 “&amp;” 确实是非法的。大于号是合法的，但是用实体引用来代替它是一个好习惯。  </p>
<p>XML 中的注释<br>在 XML 中编写注释的语法与 HTML 的语法很相似：<br><code>&lt;!-- This is a comment --&gt;</code>   </p>
<p>在 XML 中，空格会被保留<br>HTML 会把多个连续的空格字符裁减（合并）为一个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HTML:	Hello           my name is David.</div><div class="line">输出:	Hello my name is David.</div></pre></td></tr></table></figure></p>
<p>在 XML 中，文档中的空格不会被删节。  </p>
<hr>
<h2 id="XML元素"><a href="#XML元素" class="headerlink" title="XML元素"></a>XML元素</h2><p>XML 文档包含 XML 元素。<br>什么是 XML 元素？<br>XML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。<br>元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;bookstore&gt;</div><div class="line">&lt;book category=&quot;CHILDREN&quot;&gt;</div><div class="line">  &lt;title&gt;Harry Potter&lt;/title&gt; </div><div class="line">  &lt;author&gt;J K. Rowling&lt;/author&gt; </div><div class="line">  &lt;year&gt;2005&lt;/year&gt; </div><div class="line">  &lt;price&gt;29.99&lt;/price&gt; </div><div class="line">&lt;/book&gt;</div><div class="line">&lt;book category=&quot;WEB&quot;&gt;</div><div class="line">  &lt;title&gt;Learning XML&lt;/title&gt; </div><div class="line">  &lt;author&gt;Erik T. Ray&lt;/author&gt; </div><div class="line">  &lt;year&gt;2003&lt;/year&gt; </div><div class="line">  &lt;price&gt;39.95&lt;/price&gt; </div><div class="line">&lt;/book&gt;</div><div class="line">&lt;/bookstore&gt;</div></pre></td></tr></table></figure></p>
<p>在上例中，<bookstore> 和 <book> 都拥有元素内容，因为它们包含了其他元素。<author> 只有文本内容，因为它仅包含文本。<br>在上例中，只有 <book> 元素拥有属性 (category=”CHILDREN”)。</book></author></book></bookstore></p>
<p>XML 命名规则<br>XML 元素必须遵循以下命名规则：</p>
<ol>
<li>名称可以含字母、数字以及其他的字符</li>
<li>名称不能以数字或者标点符号开始</li>
<li>名称不能以字符 “xml”（或者 XML、Xml）开始</li>
<li>名称不能包含空格  </li>
</ol>
<p>可使用任何名称，没有保留的字词。  </p>
<p>最佳命名习惯<br>使名称具有描述性。使用下划线的名称也很不错。<br>名称应当比较简短，比如：<book_title>，而不是：<the_title_of_the_book>。<br>避免 “-“ 字符。如果您按照这样的方式进行命名：”first-name”，一些软件会认为你需要提取第一个单词。<br>避免 “.” 字符。如果您按照这样的方式进行命名：”first.name”，一些软件会认为 “name” 是对象 “first” 的属性。<br>避免 “:” 字符。冒号会被转换为命名空间来使用（稍后介绍）。<br>XML 文档经常有一个对应的数据库，其中的字段会对应 XML 文档中的元素。有一个实用的经验，即使用数据库的名称规则来命名 XML 文档中的元素。<br>非英语的字母比如 éòá 也是合法的 XML 元素名，不过需要留意当软件开发商不支持这些字符时可能出现的问题。  </the_title_of_the_book></book_title></p>
<p>XML 元素是可扩展的<br>XML 元素是可扩展，以携带更多的信息。<br>请看下面这个 XML 例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;note&gt;</div><div class="line">&lt;to&gt;George&lt;/to&gt;</div><div class="line">&lt;from&gt;John&lt;/from&gt;</div><div class="line">&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;</div><div class="line">&lt;/note&gt;</div></pre></td></tr></table></figure></p>
<p>让我们设想一下，我们创建了一个应用程序，可将 <to>、<from> 以及 <body> 元素提取出来，并产生以下的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MESSAGE</div><div class="line">To: George</div><div class="line">From: John</div><div class="line"></div><div class="line">Don&apos;t forget the meeting!</div></pre></td></tr></table></figure></body></from></to></p>
<p>想象一下，之后这个 XML 文档作者又向这个文档添加了一些额外的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;note&gt;</div><div class="line">&lt;date&gt;2008-08-08&lt;/date&gt;</div><div class="line">&lt;to&gt;George&lt;/to&gt;</div><div class="line">&lt;from&gt;John&lt;/from&gt;</div><div class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</div><div class="line">&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;</div><div class="line">&lt;/note&gt;</div></pre></td></tr></table></figure></p>
<p>那么这个应用程序会中断或崩溃吗？<br>不会。这个应用程序仍然可以找到 XML 文档中的 <to>、<from> 以及 <body> 元素，并产生同样的输出。<br>XML 的优势之一，就是可以经常在不中断应用程序的情况进行扩展。  </body></from></to></p>
<hr>
<h2 id="XML-属性"><a href="#XML-属性" class="headerlink" title="XML 属性"></a>XML 属性</h2><p>XML 元素可以在开始标签中包含属性，类似 HTML。<br>属性 (Attribute) 提供关于元素的额外（附加）信息。  </p>
<p>XML 属性<br>从 HTML，你会回忆起这个：<code>&lt;img src=&quot;computer.gif&quot;&gt;</code>。”src” 属性提供有关 <img> 元素的额外信息。<br>在 HTML 中（以及在 XML 中），属性提供有关元素的额外信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;computer.gif&quot;&gt;</div><div class="line">&lt;a href=&quot;demo.asp&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>属性通常提供不属于数据组成部分的信息。在下面的例子中，文件类型与数据无关，但是对需要处理这个元素的软件来说却很重要：<br><code>&lt;file type=&quot;gif&quot;&gt;computer.gif&lt;/file&gt;</code></p>
<p>XML 属性必须加引号<br>属性值必须被引号包围，不过单引号和双引号均可使用。比如一个人的性别，person 标签可以这样写：<br><code>&lt;person sex=&quot;female&quot;&gt;</code><br>或者这样也可以：<br><code>&lt;person sex=&#39;female&#39;&gt;</code><br>注释：如果属性值本身包含双引号，那么有必要使用单引号包围它，就像这个例子：<br><code>&lt;gangster name=&#39;George &quot;Shotgun&quot; Ziegler&#39;&gt;</code><br>或者可以使用实体引用：<br><code>&lt;gangster name=&quot;George &amp;quot;Shotgun&amp;quot; Ziegler&quot;&gt;</code>  </p>
<p>XML 元素 vs. 属性<br>请看这些例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;person sex=&quot;female&quot;&gt;</div><div class="line">  &lt;firstname&gt;Anna&lt;/firstname&gt;</div><div class="line">  &lt;lastname&gt;Smith&lt;/lastname&gt;</div><div class="line">&lt;/person&gt; </div><div class="line"></div><div class="line">&lt;person&gt;</div><div class="line">  &lt;sex&gt;female&lt;/sex&gt;</div><div class="line">  &lt;firstname&gt;Anna&lt;/firstname&gt;</div><div class="line">  &lt;lastname&gt;Smith&lt;/lastname&gt;</div><div class="line">&lt;/person&gt;</div></pre></td></tr></table></figure></p>
<p>在第一个例子中，sex 是一个属性。在第二个例子中，sex 则是一个子元素。两个例子均可提供相同的信息。<br>没有什么规矩可以告诉我们什么时候该使用属性，而什么时候该使用子元素。我的经验是在 HTML 中，属性用起来很便利，但是在 XML 中，您应该尽量避免使用属性。如果信息感觉起来很像数据，那么请使用子元素吧。  </p>
<p>我最喜欢的方式<br>下面的三个 XML 文档包含完全相同的信息：<br>第一个例子中使用了 date 属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;note date=&quot;08/08/2008&quot;&gt;</div><div class="line">&lt;to&gt;George&lt;/to&gt;</div><div class="line">&lt;from&gt;John&lt;/from&gt;</div><div class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</div><div class="line">&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;</div><div class="line">&lt;/note&gt;</div></pre></td></tr></table></figure></p>
<p>第二个例子中使用了 date 元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;note&gt;</div><div class="line">&lt;date&gt;08/08/2008&lt;/date&gt;</div><div class="line">&lt;to&gt;George&lt;/to&gt;</div><div class="line">&lt;from&gt;John&lt;/from&gt;</div><div class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</div><div class="line">&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;</div><div class="line">&lt;/note&gt;</div></pre></td></tr></table></figure></p>
<p>第三个例子中使用了扩展的 date 元素（这是我的最爱）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;note&gt;</div><div class="line">&lt;date&gt;</div><div class="line">  &lt;day&gt;08&lt;/day&gt;</div><div class="line">  &lt;month&gt;08&lt;/month&gt;</div><div class="line">  &lt;year&gt;2008&lt;/year&gt;</div><div class="line">&lt;/date&gt;</div><div class="line">&lt;to&gt;George&lt;/to&gt;</div><div class="line">&lt;from&gt;John&lt;/from&gt;</div><div class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</div><div class="line">&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;</div><div class="line">&lt;/note&gt;</div></pre></td></tr></table></figure></p>
<p>以上内容摘自 <a href="http://www.w3school.com.cn/xml/index.asp" target="_blank" rel="external">http://www.w3school.com.cn/xml/index.asp</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;XML简介&quot;&gt;&lt;a href=&quot;#XML简介&quot; class=&quot;headerlink&quot; title=&quot;XML简介&quot;&gt;&lt;/a&gt;XML简介&lt;/h1&gt;&lt;h2 id=&quot;什么是XML&quot;&gt;&lt;a href=&quot;#什么是XML&quot; class=&quot;headerlink&quot; title=&quot;什
    
    </summary>
    
    
      <category term="XML" scheme="http://liuzhe6.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>jstl简介</title>
    <link href="http://liuzhe6.github.io/2017/01/18/jstl%E7%AE%80%E4%BB%8B/"/>
    <id>http://liuzhe6.github.io/2017/01/18/jstl简介/</id>
    <published>2017-01-18T11:16:30.000Z</published>
    <updated>2017-01-18T11:30:16.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP标准标签库JSTL"><a href="#JSP标准标签库JSTL" class="headerlink" title="JSP标准标签库JSTL"></a>JSP标准标签库JSTL</h1><h2 id="核心标签"><a href="#核心标签" class="headerlink" title="核心标签"></a>核心标签</h2><p>核心标签是最常用的JSTL标签。引用核心标签库的语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib prefix=&quot;c&quot; </div><div class="line">           uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/01/18/jstl简介/jstl-1.png" alt="logo" title="">
                </div>
                <div class="image-caption">logo</div>
            </figure>
<hr>
<h2 id="格式化标签"><a href="#格式化标签" class="headerlink" title="格式化标签"></a>格式化标签</h2><p>JSTL格式化标签用来格式化并输出文本、日期、时间、数字。引用格式化标签库的语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib prefix=&quot;fmt&quot; </div><div class="line">           uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/01/18/jstl简介/jstl-2.png" alt="logo" title="">
                </div>
                <div class="image-caption">logo</div>
            </figure>
<hr>
<h2 id="SQL标签"><a href="#SQL标签" class="headerlink" title="SQL标签"></a>SQL标签</h2><p>JSTL SQL标签库提供了与关系型数据库（Oracle，MySQL，SQL Server等等）进行交互的标签。引用SQL标签库的语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib prefix=&quot;sql&quot; </div><div class="line">           uri=&quot;http://java.sun.com/jsp/jstl/sql&quot; %&gt;</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/01/18/jstl简介/jstl-3.png" alt="logo" title="">
                </div>
                <div class="image-caption">logo</div>
            </figure>
<hr>
<h2 id="XML标签"><a href="#XML标签" class="headerlink" title="XML标签"></a>XML标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib prefix=&quot;x&quot; </div><div class="line">           uri=&quot;http://java.sun.com/jsp/jstl/xml&quot; %&gt;</div></pre></td></tr></table></figure>
<p>在使用xml标签前，你必须将XML 和 XPath 的相关包拷贝至你的<tomcat 安装目录="">\lib下:  </tomcat></p>
<ol>
<li><p>XercesImpl.jar<br>下载地址： <a href="http://www.apache.org/dist/xerces/j/" target="_blank" rel="external">http://www.apache.org/dist/xerces/j/</a>  </p>
</li>
<li><p>xalan.jar<br>下载地址： <a href="http://xml.apache.org/xalan-j/index.html" target="_blank" rel="external">http://xml.apache.org/xalan-j/index.html</a>  </p>
</li>
</ol>
<p><img src="/2017/01/18/jstl简介/jstl-4.png" alt="logo"></p>
<hr>
<h2 id="JSTL函数"><a href="#JSTL函数" class="headerlink" title="JSTL函数"></a>JSTL函数</h2><p>JSTL包含一系列标准函数，大部分是通用的字符串处理函数。引用JSTL函数库的语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib prefix=&quot;fn&quot; </div><div class="line">           uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; %&gt;</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/01/18/jstl简介/jstl-5.png" alt="logo" title="">
                </div>
                <div class="image-caption">logo</div>
            </figure>
<hr>
<p>以上内容摘自 <a href="http://www.runoob.com/jsp/jsp-jstl.html" target="_blank" rel="external">http://www.runoob.com/jsp/jsp-jstl.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP标准标签库JSTL&quot;&gt;&lt;a href=&quot;#JSP标准标签库JSTL&quot; class=&quot;headerlink&quot; title=&quot;JSP标准标签库JSTL&quot;&gt;&lt;/a&gt;JSP标准标签库JSTL&lt;/h1&gt;&lt;h2 id=&quot;核心标签&quot;&gt;&lt;a href=&quot;#核心标签&quot; cla
    
    </summary>
    
    
      <category term="jsp" scheme="http://liuzhe6.github.io/tags/jsp/"/>
    
      <category term="jstl" scheme="http://liuzhe6.github.io/tags/jstl/"/>
    
  </entry>
  
  <entry>
    <title>jQuery ajax</title>
    <link href="http://liuzhe6.github.io/2017/01/16/jQuery-ajax/"/>
    <id>http://liuzhe6.github.io/2017/01/16/jQuery-ajax/</id>
    <published>2017-01-16T07:55:18.000Z</published>
    <updated>2017-01-30T04:27:59.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery ajax"></a>jQuery ajax</h1><p>实例<br>通过 AJAX 加载一段文本：<br>jQuery 代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(document).ready(function()&#123;</div><div class="line">  $(&quot;#b01&quot;).click(function()&#123;</div><div class="line">  htmlobj=$.ajax(&#123;url:&quot;/jquery/test1.txt&quot;,async:false&#125;);</div><div class="line">  $(&quot;#myDiv&quot;).html(htmlobj.responseText);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>HTML 代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;myDiv&quot;&gt;&lt;h2&gt;Let AJAX change this text&lt;/h2&gt;&lt;/div&gt;</div><div class="line">&lt;button id=&quot;b01&quot; type=&quot;button&quot;&gt;Change Content&lt;/button&gt;</div></pre></td></tr></table></figure></p>
<hr>
<p>定义和用法<br>ajax() 方法通过 HTTP 请求加载远程数据。<br>该方法是 jQuery 底层 AJAX 实现。简单易用的高层实现见 $.get, $.post 等。$.ajax() 返回其创建的 XMLHttpRequest   对象。大多数情况下你无需直接操作该函数，除非你需要操作不常用的选项，以获得更多的灵活性。<br>最简单的情况下，$.ajax() 可以不带任何参数直接使用。<br>注意：所有的选项都可以通过 $.ajaxSetup() 函数来全局设置。<br>语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery.ajax([settings])</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/01/16/jQuery-ajax/jquery-ajax-p1.png" alt="logo" title="">
                </div>
                <div class="image-caption">logo</div>
            </figure>
<p>参数<br>options<br>类型：Object<br>可选。AJAX 请求设置。所有选项都是可选的。  </p>
<p>async<br>类型：Boolean<br>默认值: true。默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。<br>注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。 </p>
<p>beforeSend(XHR)<br>类型：Function<br>发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。<br>XMLHttpRequest 对象是唯一的参数。<br>这是一个 Ajax 事件。如果返回 false 可以取消本次 ajax 请求。  </p>
<p>cache<br>类型：Boolean<br>默认值: true，dataType 为 script 和 jsonp 时默认为 false。设置为 false   将不缓存此页面。<br>jQuery 1.2 新功能。  </p>
<p>complete(XHR, TS)<br>类型：Function<br>请求完成后回调函数 (请求成功或失败之后均调用)。<br>参数： XMLHttpRequest 对象和一个描述请求类型的字符串。<br>这是一个 Ajax 事件。  </p>
<p>contentType<br>类型：String<br>默认值: “application/x-www-form-urlencoded”。发送信息至服务器时内容编码类型。<br>默认值适合大多数情况。如果你明确地传递了一个 content-type 给 $.ajax() 那么它必定会发送给服务器（即使没有数据要发送）。  </p>
<p>context<br>类型：Object<br>这个对象用于设置 Ajax 相关回调函数的上下文。也就是说，让回调函数内 this 指向这个对象（如果不设定这个参数，那么 this 就指向调用本次 AJAX 请求时传递的 options 参数）。比如指定一个 DOM 元素作为 context 参数，这样就设置了 success 回调函数的上下文为这个 DOM 元素。<br>就像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123; url: &quot;test.html&quot;, context: document.body, success: function()&#123;</div><div class="line">        $(this).addClass(&quot;done&quot;);</div><div class="line">      &#125;&#125;);</div></pre></td></tr></table></figure></p>
<p>data<br>类型：String<br>发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:[“bar1”, “bar2”]} 转换为 ‘&amp;foo=bar1&amp;foo=bar2’。    </p>
<p>dataFilter<br>类型：Function<br>给 Ajax 返回的原始数据的进行预处理的函数。提供 data 和 type 两个参数：data 是 Ajax 返回的原始数据，type 是调用 jQuery.ajax 时提供的 dataType 参数。函数返回的值将由 jQuery 进一步处理。  </p>
<p>dataType<br>类型：String<br>预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如 XML MIME 类型就被识别为 XML。在 1.4 中，JSON 就会生成一个 JavaScript 对象，而 script 则会执行这个脚本。随后服务器端返回的数据会根据这个值解析后，传递给回调函数。可用值:<br>“xml”: 返回 XML 文档，可用 jQuery 处理。<br>“html”: 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行。<br>“script”: 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 “cache” 参数。注意：在远程请求时(不在同一个域下)，所有 POST 请求都将转为 GET 请求。（因为将使用 DOM 的 script标签来加载）<br>“json”: 返回 JSON 数据 。<br>“jsonp”: JSONP 格式。使用 JSONP 形式调用函数时，如 “myurl?callback=?”   jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。<br>“text”: 返回纯文本字符串  </p>
<p>error<br>类型：Function<br>默认值: 自动判断 (xml 或 html)。请求失败时调用此函数。<br>有以下三个参数：XMLHttpRequest 对象、错误信息、（可选）捕获的异常对象。<br>如果发生了错误，错误信息（第二个参数）除了得到 null 之外，还可能是 “timeout”, “error”, “notmodified” 和 “parsererror”。<br>这是一个 Ajax 事件。 </p>
<p>global<br>类型：Boolean<br>是否触发全局 AJAX 事件。默认值: true。设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或 ajaxStop 可用于控制不同的 Ajax 事件。  </p>
<p>ifModified<br>类型：Boolean<br>仅在服务器数据改变时获取新数据。默认值: false。使用 HTTP 包 Last-Modified 头信息判断。在 jQuery 1.4 中，它也会检查服务器指定的 ‘etag’ 来确定数据没有被修改过。  </p>
<p>jsonp<br>类型：String<br>在一个 jsonp 请求中重写回调函数的名字。这个值用来替代在 “callback=?” 这种 GET 或 POST 请求中 URL 参数里的 “callback” 部分，比如 {jsonp:’onJsonPLoad’} 会导致将 “onJsonPLoad=?” 传给服务器。  </p>
<p>jsonpCallback<br>类型：String<br>为 jsonp 请求指定一个回调函数名。这个值将用来取代 jQuery 自动生成的随机函数名。这主要用来让 jQuery 生成度独特的函数名，这样管理请求更容易，也能方便地提供回调函数和错误处理。你也可以在想让浏览器缓存 GET 请求的时候，指定这个回调函数名。  </p>
<p>password<br>类型：String<br>用于响应 HTTP 访问认证请求的密码<br>processData<br>类型：Boolean<br>默认值: true。默认情况下，通过data选项传递进来的数据，如果是一个对象(技术上讲只要不是字符串)，都会处理转化成一个查询字符串，以配合默认内容类型 “application/x-www-form-urlencoded”。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。  </p>
<p>scriptCharset<br>类型：String<br>只有当请求时 dataType 为 “jsonp” 或 “script”，并且 type 是 “GET” 才会用于强制修改 charset。通常只在本地和远程的内容编码不同时使用。  </p>
<p>success<br>类型：Function<br>请求成功后的回调函数。<br>参数：由服务器返回，并根据 dataType   参数进行处理后的数据；描述状态的字符串。<br>这是一个 Ajax 事件。  </p>
<p>traditional<br>类型：Boolean<br>如果你想要用传统的方式来序列化数据，那么就设置为 true。请参考工具分类下面的 jQuery.param 方法。  </p>
<p>timeout<br>类型：Number<br>设置请求超时时间（毫秒）。此设置将覆盖全局设置。  </p>
<p>type<br>类型：String<br>默认值: “GET”)。请求方式 (“POST” 或 “GET”)， 默认为 “GET”。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。  </p>
<p>url<br>类型：String<br>默认值: 当前页地址。发送请求的地址。 </p>
<p>username<br>类型：String<br>用于响应 HTTP 访问认证请求的用户名。 </p>
<p>xhr<br>类型：Function<br>需要返回一个 XMLHttpRequest 对象。默认在 IE 下是 ActiveXObject  而其他情况下是 XMLHttpRequest 。用于重写或者提供一个增强的 XMLHttpRequest 对象。这个参数在 jQuery 1.3 以前不可用。  </p>
<hr>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>如果要处理 $.ajax() 得到的数据，则需要使用回调函数：beforeSend、error、dataFilter、success、complete。  </p>
<p>beforeSend<br>在发送请求之前调用，并且传入一个 XMLHttpRequest 作为参数。  </p>
<p>error<br>在请求出错时调用。传入 XMLHttpReques 对象，描述错误类型的字符串以及一个异常对象（如果有的话）  </p>
<p>dataFilter<br>在请求成功之后调用。传入返回的数据以及 “dataType” 参数的值。并且必须返回新的数据（可能是处理过的）传递给 success 回调函数。  </p>
<p>success<br>当请求之后调用。传入返回后的数据，以及包含成功代码的字符串。  </p>
<p>complete<br>当请求完成之后调用这个函数，无论成功或失败。传入 XMLHttpRequest 对象，以及一个包含成功或错误代码的字符串。  </p>
<hr>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>$.ajax() 函数依赖服务器提供的信息来处理返回的数据。如果服务器报告说返回的数据是 XML，那么返回的结果就可以用普通的 XML 方法或者 jQuery 的选择器来遍历。如果见得到其他类型，比如 HTML，则数据就以文本形式来对待。<br>通过 dataType 选项还可以指定其他不同数据处理方式。除了单纯的 XML，还可以指定 html、json、jsonp、script 或者 text。<br>其中，text 和 xml 类型返回的数据不会经过处理。数据仅仅简单的将 XMLHttpRequest 的 responseText 或 responseHTML 属性传递给 success 回调函数。  </p>
<p>注意：我们必须确保网页服务器报告的 MIME 类型与我们选择的 dataType 所匹配。比如说，XML的话，服务器端就必须声明 text/xml 或者 application/xml 来获得一致的结果。<br>如果指定为 html 类型，任何内嵌的 JavaScript 都会在 HTML 作为一个字符串返回之前执行。类似地，指定 script 类型的话，也会先执行服务器端生成 JavaScript，然后再把脚本作为一个文本数据返回。  </p>
<p>如果指定为 json 类型，则会把获取到的数据作为一个 JavaScript 对象来解析，并且把构建好的对象作为结果返回。为了实现这个目的，它首先尝试使用 JSON.parse()。如果浏览器不支持，则使用一个函数来构建。  </p>
<p>JSON 数据是一种能很方便通过 JavaScript 解析的结构化数据。如果获取的数据文件存放在远程服务器上（域名不同，也就是跨域获取数据），则需要使用 jsonp 类型。使用这种类型的话，会创建一个查询字符串参数 callback=? ，这个参数会加在请求的 URL 后面。服务器端应当在 JSON 数据前加上回调函数名，以便完成一个有效的 JSONP 请求。如果要指定回调函数的参数名来取代默认的 callback，可以通过设置 $.ajax() 的 jsonp 参数。  </p>
<p>注意：JSONP 是 JSON 格式的扩展。它要求一些服务器端的代码来检测并处理查询字符串参数。<br>如果指定了 script 或者 jsonp 类型，那么当从服务器接收到数据时，实际上是用了 <script> 标签而不是 XMLHttpRequest 对象。这种情况下，$.ajax() 不再返回一个 XMLHttpRequest 对象，并且也不会传递事件处理函数，比如 beforeSend。  </p>
<hr>
<h2 id="发送数据到服务器"><a href="#发送数据到服务器" class="headerlink" title="发送数据到服务器"></a>发送数据到服务器</h2><p>默认情况下，Ajax 请求使用 GET 方法。如果要使用 POST 方法，可以设定 type 参数值。这个选项也会影响 data 选项中的内容如何发送到服务器。  </p>
<p>data 选项既可以包含一个查询字符串，比如 key1=value1&amp;key2=value2 ，也可以是一个映射，比如 {key1: ‘value1’, key2: ‘value2’} 。如果使用了后者的形式，则数据再发送器会被转换成查询字符串。这个处理过程也可以通过设置 processData 选项为 false 来回避。如果我们希望发送一个 XML 对象给服务器时，这种处理可能并不合适。并且在这种情况下，我们也应当改变 contentType 选项的值，用其他合适的 MIME 类型来取代默认的 application/x-www-form-urlencoded 。  </p>
<hr>
<h2 id="高级选项"><a href="#高级选项" class="headerlink" title="高级选项"></a>高级选项</h2><p>global 选项用于阻止响应注册的回调函数，比如 .ajaxSend，或者 ajaxError，以及类似的方法。这在有些时候很有用，比如发送的请求非常频繁且简短的时候，就可以在 ajaxSend 里禁用这个。  </p>
<p>如果服务器需要 HTTP 认证，可以使用用户名和密码可以通过 username 和 password 选项来设置。  </p>
<p>Ajax 请求是限时的，所以错误警告被捕获并处理后，可以用来提升用户体验。请求超时这个参数通常就保留其默认值，要不就通过 jQuery.ajaxSetup 来全局设定，很少为特定的请求重新设置 timeout 选项。  </p>
<p>默认情况下，请求总会被发出去，但浏览器有可能从它的缓存中调取数据。要禁止使用缓存的结果，可以设置 cache 参数为 false。如果希望判断数据自从上次请求后没有更改过就报告出错的话，可以设置 ifModified 为 true。  </p>
<p>scriptCharset 允许给 <script> 标签的请求设定一个特定的字符集，用于 script 或者 jsonp 类似的数据。当脚本和页面字符集不同时，这特别好用。  </p>
<p>Ajax 的第一个字母是 asynchronous 的开头字母，这意味着所有的操作都是并行的，完成的顺序没有前后关系。$.ajax() 的 async 参数总是设置成true，这标志着在请求开始后，其他代码依然能够执行。强烈不建议把这个选项设置成 false，这意味着所有的请求都不再是异步的了，这也会导致浏览器被锁死。  </p>
<p>$.ajax 函数返回它创建的 XMLHttpRequest 对象。通常 jQuery 只在内部处理并创建这个对象，但用户也可以通过 xhr 选项来传递一个自己创建的 xhr 对象。返回的对象通常已经被丢弃了，但依然提供一个底层接口来观察和操控请求。比如说，调用对象上的 .abort() 可以在请求完成前挂起请求。  </p>
<hr>
<p>以上内容全部摘自 <a href="http://www.w3school.com.cn/jquery/ajax_ajax.asp">WSchool</a></p>
</script></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jQuery-ajax&quot;&gt;&lt;a href=&quot;#jQuery-ajax&quot; class=&quot;headerlink&quot; title=&quot;jQuery ajax&quot;&gt;&lt;/a&gt;jQuery ajax&lt;/h1&gt;&lt;p&gt;实例&lt;br&gt;通过 AJAX 加载一段文本：&lt;br&gt;jQuery 代码
    
    </summary>
    
    
      <category term="jQuery" scheme="http://liuzhe6.github.io/tags/jQuery/"/>
    
      <category term="ajax" scheme="http://liuzhe6.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Ajax简介</title>
    <link href="http://liuzhe6.github.io/2017/01/16/Ajax%E7%AE%80%E4%BB%8B/"/>
    <id>http://liuzhe6.github.io/2017/01/16/Ajax简介/</id>
    <published>2017-01-16T03:22:53.000Z</published>
    <updated>2017-01-18T10:44:42.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ajax开发"><a href="#ajax开发" class="headerlink" title="ajax开发"></a>ajax开发</h1><p>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。<br>AJAX = 异步 JavaScript和XML（标准通用标记语言的子集）。<br>AJAX 是一种用于创建快速动态网页的技术。<br>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br>传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个网页页面。  </p>
<p>摘自百度百科  </p>
<hr>
<h2 id="AJAX-创建-XMLHttpRequest-对象"><a href="#AJAX-创建-XMLHttpRequest-对象" class="headerlink" title="AJAX - 创建 XMLHttpRequest 对象"></a>AJAX - 创建 XMLHttpRequest 对象</h2><p>XMLHttpRequest 是 AJAX 的基础。<br>XMLHttpRequest 对象<br>所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。<br>XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br>创建 XMLHttpRequest 对象<br>所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。<br>创建 XMLHttpRequest 对象的语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">variable=new XMLHttpRequest();</div></pre></td></tr></table></figure></p>
<p>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">variable=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</div></pre></td></tr></table></figure></p>
<p>为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var xmlhttp;  </div><div class="line">if (window.XMLHttpRequest)</div><div class="line">  &#123;// code for IE7+, Firefox, Chrome, Opera, Safari</div><div class="line">  xmlhttp=new XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line">else</div><div class="line">  &#123;// code for IE6, IE5</div><div class="line">  xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="AJAX-向服务器发送请求"><a href="#AJAX-向服务器发送请求" class="headerlink" title="AJAX - 向服务器发送请求"></a>AJAX - 向服务器发送请求</h2><p>XMLHttpRequest 对象用于和服务器交换数据。<br>向服务器发送请求<br>如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send()   方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(&quot;GET&quot;,&quot;test1.txt&quot;,true);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/01/16/Ajax简介/ajax-p1.png" alt="logo" title="">
                </div>
                <div class="image-caption">logo</div>
            </figure>  
<hr>
<p>GET 还是 POST？<br>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。<br>然而，在以下情况中，请使用 POST 请求：  </p>
<ol>
<li>无法使用缓存文件（更新服务器上的文件或数据库）</li>
<li>向服务器发送大量数据（POST 没有数据量限制）</li>
<li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li>
</ol>
<hr>
<p>GET 请求<br>一个简单的 GET 请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(&quot;GET&quot;,&quot;demo_get.asp&quot;,true);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure></p>
<hr>
<p>在上面的例子中，您可能得到的是缓存的结果。<br>为了避免这种情况，请向 URL 添加一个唯一的 ID：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(&quot;GET&quot;,&quot;demo_get.asp?t=&quot; + Math.random(),true);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure></p>
<hr>
<p>如果您希望通过 GET 方法发送信息，请向 URL 添加信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(&quot;GET&quot;,&quot;demo_get2.asp?fname=Bill&amp;lname=Gates&quot;,true);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure></p>
<hr>
<p>POST 请求<br>一个简单 POST 请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(&quot;POST&quot;,&quot;demo_post.asp&quot;,true);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure></p>
<hr>
<p>如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(&quot;POST&quot;,&quot;ajax_test.asp&quot;,true);</div><div class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</div><div class="line">xmlhttp.send(&quot;fname=Bill&amp;lname=Gates&quot;);</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/01/16/Ajax简介/ajax-p2.png" alt="logo" title="">
                </div>
                <div class="image-caption">logo</div>
            </figure>
<hr>
<p>url - 服务器上的文件<br>open() 方法的 url 参数是服务器上文件的地址：<br><code>xmlhttp.open(&quot;GET&quot;,&quot;ajax_test.asp&quot;,true);</code><br>该文件可以是任何类型的文件，比如 .txt 和 .xml，或者服务器脚本文件，比如 .asp 和 .php （在传回响应之前，能够在服务器上执行任务）。</p>
<hr>
<p>异步 - True 或 False？<br>AJAX 指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。<br>XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async   参数必须设置为 true：<br><code>xmlhttp.open(&quot;GET&quot;,&quot;ajax_test.asp&quot;,true);</code><br>对于 web 开发人员来说，发送异步请求是一个巨大的进步。很多在服务器执行的任务都相当费时。AJAX 出现之前，这可能会引起应用程序挂起或停止。<br>通过 AJAX，JavaScript 无需等待服务器的响应，而是：  </p>
<ol>
<li>在等待服务器响应时执行其他脚本</li>
<li>当响应就绪后对响应进行处理</li>
</ol>
<hr>
<p>Async = true<br>当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">xmlhttp.onreadystatechange=function()</div><div class="line">  &#123;</div><div class="line">  if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</div><div class="line">    &#123;</div><div class="line">    document.getElementById(&quot;myDiv&quot;).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(&quot;GET&quot;,&quot;test1.txt&quot;,true);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure></p>
<hr>
<p>Async = false<br>如需使用 async=false，请将 open() 方法中的第三个参数改为 false：<br><code>xmlhttp.open(&quot;GET&quot;,&quot;test1.txt&quot;,false);</code><br>我们不推荐使用 async=false，但是对于一些小型的请求，也是可以的。<br>请记住，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。<br>注释：当您使用 async=false 时，请不要编写 <code>onreadystatechange</code> 函数 -   把代码放到 send() 语句后面即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(&quot;GET&quot;,&quot;test1.txt&quot;,false);</div><div class="line">xmlhttp.send();</div><div class="line">document.getElementById(&quot;myDiv&quot;).innerHTML=xmlhttp.responseText;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="AJAX-服务器响应"><a href="#AJAX-服务器响应" class="headerlink" title="AJAX - 服务器响应"></a>AJAX - 服务器响应</h2><p>服务器响应<br>如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。<br><img src="/2017/01/16/Ajax简介/ajax-p3.png" alt="logo"></p>
<hr>
<p>responseText 属性<br>如果来自服务器的响应并非 XML，请使用 responseText 属性。<br>responseText 属性返回字符串形式的响应，因此您可以这样使用：<br><code>document.getElementById(&quot;myDiv&quot;).innerHTML=xmlhttp.responseText;</code></p>
<hr>
<p>responseXML 属性<br>如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用   responseXML 属性：<br>请求 books.xml 文件，并解析响应：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">xmlDoc=xmlhttp.responseXML;</div><div class="line">txt=&quot;&quot;;</div><div class="line">x=xmlDoc.getElementsByTagName(&quot;ARTIST&quot;);</div><div class="line">for (i=0;i&lt;x.length;i++)</div><div class="line">  &#123;</div><div class="line">  txt=txt + x[i].childNodes[0].nodeValue + &quot;&lt;br /&gt;&quot;;</div><div class="line">  &#125;</div><div class="line">document.getElementById(&quot;myDiv&quot;).innerHTML=txt;</div></pre></td></tr></table></figure>
<p>以上内容来自 WSchool <a href="http://www.w3school.com.cn/ajax/ajax_xmlhttprequest_response.asp" target="_blank" rel="external">点击</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ajax开发&quot;&gt;&lt;a href=&quot;#ajax开发&quot; class=&quot;headerlink&quot; title=&quot;ajax开发&quot;&gt;&lt;/a&gt;ajax开发&lt;/h1&gt;&lt;p&gt;AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XM
    
    </summary>
    
    
      <category term="Ajax" scheme="http://liuzhe6.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>idea建立web service client时抛出SAXParseException解决办法</title>
    <link href="http://liuzhe6.github.io/2017/01/14/idea%E5%BB%BA%E7%AB%8Bweb-service-client%E6%97%B6%E6%8A%9B%E5%87%BASAXParseException%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://liuzhe6.github.io/2017/01/14/idea建立web-service-client时抛出SAXParseException解决办法/</id>
    <published>2017-01-14T03:05:03.000Z</published>
    <updated>2017-01-14T03:07:06.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用idea开发平台建立web-service-client抛出异常"><a href="#使用idea开发平台建立web-service-client抛出异常" class="headerlink" title="使用idea开发平台建立web service client抛出异常"></a>使用idea开发平台建立web service client抛出异常</h2><p>问题描述:<br>抛出java.lang.AssertionError: org.xml.sax.SAXParseException; systemId: jar..  </p>
<p>问题原因:<br>我使用的jdk版本为jdk8,而jdk8对jaxb-xjc-2.2.7有这个BUG,<a href="https://bugs.openjdk.java.net/browse/JDK-8020999?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel" target="_blank" rel="external">详细原因请点击查看</a>  </p>
<p>解决方法:<br>在 jdk1.8.0/jre/lib 下创建一个文件 jaxp.properties,并且在文件中写下一句话<br><code>javax.xml.accessExternalSchema = all</code>  </p>
<p>从<a href="http://bbs.csdn.net/topics/390899440" target="_blank" rel="external">CSDN</a>整理并发表</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用idea开发平台建立web-service-client抛出异常&quot;&gt;&lt;a href=&quot;#使用idea开发平台建立web-service-client抛出异常&quot; class=&quot;headerlink&quot; title=&quot;使用idea开发平台建立web service 
    
    </summary>
    
    
      <category term="idea" scheme="http://liuzhe6.github.io/tags/idea/"/>
    
      <category term="web service client" scheme="http://liuzhe6.github.io/tags/web-service-client/"/>
    
      <category term="异常" scheme="http://liuzhe6.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>json语法</title>
    <link href="http://liuzhe6.github.io/2017/01/06/json%E8%AF%AD%E6%B3%95/"/>
    <id>http://liuzhe6.github.io/2017/01/06/json语法/</id>
    <published>2017-01-06T13:37:30.000Z</published>
    <updated>2017-01-06T13:37:43.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="json语法"><a href="#json语法" class="headerlink" title="json语法"></a>json语法</h1><p>JSON 语法是 JavaScript 语法的子集。<br>JSON 语法规则</p>
<p>JSON 语法是 JavaScript 对象表示法语法的子集。<br>数据在名称/值对中<br>数据由逗号分隔<br>花括号保存对象<br>方括号保存数组<br>JSON 名称/值对  </p>
<p>JSON 数据的书写格式是：名称/值对。<br>名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：<br><code>&quot;firstName&quot; : &quot;John&quot;</code><br>这很容易理解，等价于这条 JavaScript 语句：<br><code>firstName = &quot;John&quot;</code><br>JSON 值   </p>
<p>JSON 值可以是：<br>数字（整数或浮点数）<br>字符串（在双引号中）<br>逻辑值（true 或 false）<br>数组（在方括号中）<br>对象（在花括号中）<br>null<br>JSON 对象  </p>
<p>JSON 对象在花括号中书写：<br>对象可以包含多个名称/值对：<br><code>{ &quot;firstName&quot;:&quot;John&quot; , &quot;lastName&quot;:&quot;Doe&quot; }</code><br>这一点也容易理解，与这条 JavaScript 语句等价：<br><code>firstName = &quot;John&quot;</code><br><code>lastName = &quot;Doe&quot;</code><br>JSON 数组  </p>
<p>JSON 数组在方括号中书写：<br>数组可包含多个对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&quot;employees&quot;: [</div><div class="line">&#123; &quot;firstName&quot;:&quot;John&quot; , &quot;lastName&quot;:&quot;Doe&quot; &#125;,</div><div class="line">&#123; &quot;firstName&quot;:&quot;Anna&quot; , &quot;lastName&quot;:&quot;Smith&quot; &#125;,</div><div class="line">&#123; &quot;firstName&quot;:&quot;Peter&quot; , &quot;lastName&quot;:&quot;Jones&quot; &#125;</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在上面的例子中，对象 “employees”   是包含三个对象的数组。每个对象代表一条关于某人（有姓和名）的记录。<br>JSON 使用 JavaScript 语法  </p>
<p>因为 JSON 使用 JavaScript 语法，所以无需额外的软件就能处理 JavaScript 中的 JSON。<br>通过 JavaScript，您可以创建一个对象数组，并像这样进行赋值：<br>例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var employees = [</div><div class="line">&#123; &quot;firstName&quot;:&quot;Bill&quot; , &quot;lastName&quot;:&quot;Gates&quot; &#125;,</div><div class="line">&#123; &quot;firstName&quot;:&quot;George&quot; , &quot;lastName&quot;:&quot;Bush&quot; &#125;,</div><div class="line">&#123; &quot;firstName&quot;:&quot;Thomas&quot; , &quot;lastName&quot;: &quot;Carter&quot; &#125;</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>可以像这样访问 JavaScript 对象数组中的第一项：<br><code>employees[0].lastName;</code><br>返回的内容是：<br><code>Gates</code><br>可以像这样修改数据：<br><code>employees[0].lastName = &quot;Jobs&quot;;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;json语法&quot;&gt;&lt;a href=&quot;#json语法&quot; class=&quot;headerlink&quot; title=&quot;json语法&quot;&gt;&lt;/a&gt;json语法&lt;/h1&gt;&lt;p&gt;JSON 语法是 JavaScript 语法的子集。&lt;br&gt;JSON 语法规则&lt;/p&gt;
&lt;p&gt;JSON 语法
    
    </summary>
    
    
      <category term="json" scheme="http://liuzhe6.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>一个jsp向另一个jsp传值</title>
    <link href="http://liuzhe6.github.io/2017/01/06/%E4%B8%80%E4%B8%AAjsp%E5%90%91%E5%8F%A6%E4%B8%80%E4%B8%AAjsp%E4%BC%A0%E5%80%BC/"/>
    <id>http://liuzhe6.github.io/2017/01/06/一个jsp向另一个jsp传值/</id>
    <published>2017-01-06T13:31:42.000Z</published>
    <updated>2017-01-06T13:31:51.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个jsp向另一个jsp传值"><a href="#一个jsp向另一个jsp传值" class="headerlink" title="一个jsp向另一个jsp传值"></a>一个jsp向另一个jsp传值</h1><ol>
<li>通过jsp的内置对象—request对象获取参数：<br>（1）通过超链接传参：<br>例：把a.jsp中i的值传到b.jsp中：<br>在a.jsp页面中的核心代码为:<br>传参 （说明：给i赋值时也可以用jsp表达式，例如i=&lt;%变量名 %&gt;)<br>在b.jsp页面中的核心代码为：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%String j=request.getParameter(&quot;i&quot;); %&gt;</div><div class="line">&lt;%=j %&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>（2）通过request.setAttribute()方法：<br>例：把a.jsp中表单中的name的值传送到b.jsp中：</p>
<p>在a.jsp页面中的核心代码为：<br><code>&lt;%request.setAttribute(name,&quot;Danny&quot;);%&gt;</code><br>在b.jsp页面中的核心代码为：<br><code>&lt;%String getName=request.getParameter(&quot;name&quot;); %&gt;</code></p>
<p>（3）通过表单传参：<br>例：把a.jsp中表单中的name的值传送到b.jsp中：<br>在a.jsp页面中的核心代码为：</p>
<p>重要的是，在jsp脚本中是无法使用EL表达式的，但是可以替换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">    request.setAttribute(&quot;username&quot;, request.getAttribute(&quot;username&quot;));</div><div class="line">    request.setAttribute(&quot;email&quot;, request.getAttribute(&quot;email&quot;));</div><div class="line">%&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一个jsp向另一个jsp传值&quot;&gt;&lt;a href=&quot;#一个jsp向另一个jsp传值&quot; class=&quot;headerlink&quot; title=&quot;一个jsp向另一个jsp传值&quot;&gt;&lt;/a&gt;一个jsp向另一个jsp传值&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;通过jsp的内置对象—reque
    
    </summary>
    
    
      <category term="jsp" scheme="http://liuzhe6.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://liuzhe6.github.io/2017/01/06/JavaScript/"/>
    <id>http://liuzhe6.github.io/2017/01/06/JavaScript/</id>
    <published>2017-01-06T13:15:55.000Z</published>
    <updated>2017-01-06T13:22:45.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h2><p>JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。<br>在1995年时，由Netscape公司的Brendan Eich，在网景导航者浏览器上首次设计实现而成。因为Netscape与Sun合作，Netscape管理层希望它外观看起来像Java，因此取名为JavaScript。但实际上它的语法风格与Self及Scheme较为接近。<br>为了取得技术优势，微软推出了JScript，CEnvi推出ScriptEase，与JavaScript同样可在浏览器上运行。为了统一规格，因为JavaScript兼容于ECMA标准，因此也称为ECMAScript。  </p>
<p>戳这里 <a href="http://www.w3school.com.cn/js/" target="_blank" rel="external">W3School学习网站</a></p>
<hr>
<h2 id="JavaScript：写入-HTML-输出"><a href="#JavaScript：写入-HTML-输出" class="headerlink" title="JavaScript：写入 HTML 输出"></a>JavaScript：写入 HTML 输出</h2><p>实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">document.write(&quot;&lt;h1&gt;This is a heading&lt;/h1&gt;&quot;);</div><div class="line">document.write(&quot;&lt;p&gt;This is a paragraph&lt;/p&gt;&quot;);</div></pre></td></tr></table></figure></p>
<p>提示：您只能在 HTML 输出中使用 document.write。如果您在文档加载后使用该方法，会覆盖整个文档。  </p>
<hr>
<h2 id="JavaScript：对事件作出反应"><a href="#JavaScript：对事件作出反应" class="headerlink" title="JavaScript：对事件作出反应"></a>JavaScript：对事件作出反应</h2><p><code>&lt;button type=&quot;button&quot; onclick=&quot;alert(&#39;Welcome!&#39;)&quot;&gt;点击这里&lt;/button&gt;</code><br>alert() 函数在 JavaScript 中并不常用，但它对于代码测试非常方便。<br>onclick 事件只是您即将在本教程中学到的众多事件之一。  </p>
<hr>
<h2 id="JavaScript：改变-HTML-内容"><a href="#JavaScript：改变-HTML-内容" class="headerlink" title="JavaScript：改变 HTML 内容"></a>JavaScript：改变 HTML 内容</h2><p>使用 JavaScript 来处理 HTML 内容是非常强大的功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x=document.getElementById(&quot;demo&quot;)  //查找元素</div><div class="line">x.innerHTML=&quot;Hello JavaScript&quot;;    //改变内容</div></pre></td></tr></table></figure></p>
<p>您会经常看到 document.getElementByID(“some id”)。这个方法是 HTML DOM 中定义的。<br>DOM（文档对象模型）是用以访问 HTML 元素的正式 W3C 标准。<br>您将在本教程的多个章节中学到有关 HTML DOM 的知识。</p>
<hr>
<p>JavaScript 与 Java 是两种完全不同的语言，无论在概念还是设计上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;h2 id=&quot;JavaScript简介&quot;&gt;&lt;a href=&quot;#JavaScrip
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://liuzhe6.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JSP</title>
    <link href="http://liuzhe6.github.io/2017/01/06/JSP/"/>
    <id>http://liuzhe6.github.io/2017/01/06/JSP/</id>
    <published>2017-01-06T12:45:24.000Z</published>
    <updated>2017-01-06T13:10:53.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP简介"><a href="#JSP简介" class="headerlink" title="JSP简介"></a>JSP简介</h1><h3 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是JSP</h3><p>JSP全名为Java Server Pages，中文名叫java服务器页面，其根本是一个简化的Servlet设计，它[1]  是由Sun Microsystems公司倡导、许多公司参与一起建立的一种动态网页技术标准。JSP技术有点类似ASP技术，它是在传统的网页HTML（标准通用标记语言的子集）文件(<em>.htm,</em>.html)中插入Java程序段(Scriptlet)和JSP标记(tag)，从而形成JSP文件，后缀名为(*.jsp)。 用JSP开发的Web应用是跨平台的，既能在Linux下运行，也能在其他操作系统上运行。</p>
<p>它实现了Html语法中的java扩展（以 &lt;%, %&gt;形式）。JSP与Servlet一样，是在服务器端执行的。通常返回给客户端的就是一个HTML文本，因此客户端只要有浏览器就能浏览。</p>
<p>Java Servlet是JSP的技术基础，而且大型的Web应用程序的开发需要Java Servlet和JSP配合才能完成。JSP具备了Java技术的简单易用，完全的面向对象，具有平台无关性且安全可靠，主要面向因特网的所有特点。</p>
<p>(详细介绍请查阅相关资料  这里就不一一介绍了)</p>
<hr>
<h3 id="第一个JSP"><a href="#第一个JSP" class="headerlink" title="第一个JSP"></a>第一个JSP</h3><p>第一个JSP程序<br>语言学习入门的第一个程序一般都是输出”Hello World！”，JSP输出”Hello World！”代码如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">           &lt;title&gt;第一个JSP程序&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">           &lt;%</div><div class="line">                  out.println(&quot;Hello World！&quot;);</div><div class="line">           %&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="JSP语法"><a href="#JSP语法" class="headerlink" title="JSP语法"></a>JSP语法</h3><p>脚本程序<br>脚本程序可以包含任意量的Java语句、变量、方法或表达式，只要它们在脚本语言中是有效的。<br>脚本程序的语法格式：<br>&lt;% 代码片段 %&gt;<br>或者，您也可以编写与其等价的XML语句，就像下面这样：  </p>
<p><jsp:scriptlet><br>   代码片段<br></jsp:scriptlet><br>任何文本、HTML标签、JSP元素必须写在脚本程序的外面。<br>下面给出一个示例，同时也是本教程的第一个JSP示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">Hello World!&lt;br/&gt;</div><div class="line">&lt;%</div><div class="line">out.println(&quot;Your IP address is &quot; + request.getRemoteAddr());</div><div class="line">%&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://www.runoob.com/wp-content/uploads/2014/01/jsp_hello_world.jpg" alt="image"></p>
<hr>
<h3 id="中文编码问题的解决"><a href="#中文编码问题的解决" class="headerlink" title="中文编码问题的解决"></a>中文编码问题的解决</h3><p>如果我们要在页面正常显示中文，我们需要在 JSP 文件头部添加以下代码：&lt;&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</div><div class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</div></pre></td></tr></table></figure></p>
<p>接下来我们将以上程序修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</div><div class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">Hello World!&lt;br/&gt;</div><div class="line">&lt;%</div><div class="line">out.println(&quot;你的 IP 地址 &quot; + request.getRemoteAddr());</div><div class="line">%&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>这样中文就可以正常显示了。  </p>
<hr>
<h3 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h3><p>一个JSP表达式中包含的脚本语言表达式，先被转化成String，然后插入到表达式出现的地方。<br>由于表达式的值会被转化成String，所以您可以在一个文本行中使用表达式而不用去管它是否是HTML标签。<br>表达式元素中可以包含任何符合Java语言规范的表达式，但是不能使用分号来结束表达式。<br>JSP表达式的语法格式：<br><code>&lt;%= 表达式 %&gt;</code><br>程序示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</div><div class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;p&gt;</div><div class="line">   今天的日期是: &lt;%= (new java.util.Date()).toLocaleString()%&gt;</div><div class="line">&lt;/p&gt;</div><div class="line">&lt;/body&gt; </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</div><div class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;%-- 该部分注释在网页中不会被显示--%&gt; </div><div class="line">&lt;p&gt;</div><div class="line">   今天的日期是: &lt;%= (new java.util.Date()).toLocaleString()%&gt;</div><div class="line">&lt;/p&gt;</div><div class="line">&lt;/body&gt; </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>运行后得到以下结果：<br><code>今天的日期是: 2017-1-6 20:39:30</code><br>不同情况下使用注释的语法规则：  </p>
<table>
<thead>
<tr>
<th>语法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;%– 注释 –%&gt;</td>
<td style="text-align:center">JSP注释，注释内容不会被发送至浏览器甚至不会被编译</td>
</tr>
<tr>
<td><!-- 注释 --></td>
<td style="text-align:center">HTML注释，通过浏览器查看网页源代码时可以看见注释内容</td>
</tr>
<tr>
<td>&lt;\%</td>
<td style="text-align:center">代表静态 &lt;%常量</td>
</tr>
<tr>
<td>%></td>
<td style="text-align:center">代表静态 %&gt; 常量</td>
</tr>
<tr>
<td>\’</td>
<td style="text-align:center">在属性中使用的单引号</td>
</tr>
<tr>
<td>\”</td>
<td style="text-align:center">在属性中使用的双引号</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h3><p>JSP指令用来设置与整个JSP页面相关的属性。<br>JSP指令语法格式：<br><code>&lt;%@ directive attribute=&quot;value&quot; %&gt;</code></p>
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;%@ page … %&gt;</td>
<td>定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</td>
</tr>
<tr>
<td>&lt;%@ include … %&gt;</td>
<td>包含其他文件</td>
</tr>
<tr>
<td>&lt;%@ taglib … %&gt;</td>
<td>引入标签库的定义，可以是自定义标签</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSP简介&quot;&gt;&lt;a href=&quot;#JSP简介&quot; class=&quot;headerlink&quot; title=&quot;JSP简介&quot;&gt;&lt;/a&gt;JSP简介&lt;/h1&gt;&lt;h3 id=&quot;什么是JSP&quot;&gt;&lt;a href=&quot;#什么是JSP&quot; class=&quot;headerlink&quot; title=&quot;什
    
    </summary>
    
    
      <category term="jsp" scheme="http://liuzhe6.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>jsp使用项目路径之外的图片方法</title>
    <link href="http://liuzhe6.github.io/2016/08/06/jsp%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E8%B7%AF%E5%BE%84%E4%B9%8B%E5%A4%96%E7%9A%84%E5%9B%BE%E7%89%87%E6%96%B9%E6%B3%95/"/>
    <id>http://liuzhe6.github.io/2016/08/06/jsp使用项目路径之外的图片方法/</id>
    <published>2016-08-06T10:21:53.000Z</published>
    <updated>2017-01-06T11:05:43.667Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一个java web项目，把图片放在项目目录或者tomcat目录 可能会出现一些问题，那么我们可以放在项目目录之外，甚至可以放到不同的磁盘上，那么就需要在tomcat设置虚拟目录。</strong></p>
<h3 id="在tomcat的conf-server-xml中设置虚拟路径"><a href="#在tomcat的conf-server-xml中设置虚拟路径" class="headerlink" title="在tomcat的conf/server.xml中设置虚拟路径"></a>在tomcat的conf/server.xml中设置虚拟路径</h3><p>在tomcat下的conf/server.xml中增加一个代码 在<host></host>中间<br>如下： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--增加的--path=&quot;/虚拟名&quot; docBase=&quot;虚拟路径&quot; -&gt; </div><div class="line">&lt;Context path=&quot;/virtual&quot; docBase=&quot;D:\upload\&quot;  reloadable=&quot;true&quot;&gt;&lt;/Context&gt;</div></pre></td></tr></table></figure>
<p>在jsp中这样使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;/virtual/1.jsp&quot;&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一个java web项目，把图片放在项目目录或者tomcat目录 可能会出现一些问题，那么我们可以放在项目目录之外，甚至可以放到不同的磁盘上，那么就需要在tomcat设置虚拟目录。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;在tomcat的conf-serv
    
    </summary>
    
    
      <category term="jsp" scheme="http://liuzhe6.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>JFinal上传图片及其重命名</title>
    <link href="http://liuzhe6.github.io/2016/08/01/JFinal%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%8F%8A%E5%85%B6%E9%87%8D%E5%91%BD%E5%90%8D/"/>
    <id>http://liuzhe6.github.io/2016/08/01/JFinal上传图片及其重命名/</id>
    <published>2016-08-01T09:34:12.000Z</published>
    <updated>2017-01-06T11:03:46.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、表单处理"><a href="#一、表单处理" class="headerlink" title="一、表单处理"></a>一、表单处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;applicant/changeInformation&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; &gt;</div><div class="line">	&lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</div><div class="line">	&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;</div><div class="line">	&lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h2 id="二、在后台的配置"><a href="#二、在后台的配置" class="headerlink" title="二、在后台的配置"></a>二、在后台的配置</h2><p>我们需要在Controller中得到表单里的三个东西，因为我们在客户端的请求为multipart request(form 表单使用了<strong>enctype=”multipart/form-data”</strong>)， 那么必须先调用getFile系列的方法才能使用getPara系列的方法正常工作，因为multipart request需要通过getFile系列方法解析请求体中的数据，包括参数</p>
<p>我们设置上传文件的路径为<strong>“D:/Activity_Registration_System/user_img”</strong><br>那么，在jfinal的config中设置一个基础上传路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void configConstant(Constants me) &#123;</div><div class="line">	// TODO Auto-generated method stub</div><div class="line">	PropKit.use(&quot;SQLConfig.txt&quot;);</div><div class="line">	me.setDevMode(PropKit.getBoolean(&quot;devMode&quot;));</div><div class="line">	me.setViewType(ViewType.JSP);</div><div class="line">	//设置上传的基础路径,设置在D盘的Activity_Registration_System文件夹下面</div><div class="line">	me.setBaseUploadPath(&quot;D:/Activity_Registration_System/&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="三、在Controller里的配置"><a href="#三、在Controller里的配置" class="headerlink" title="三、在Controller里的配置"></a>三、在Controller里的配置</h2><p>接下来，在Controller里面得到文件以及数据，并把文件保存在这个目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//先使用getFile()获得上传的文件,并存在 基础路径+user_img 这个绝对路径下面</div><div class="line">String realpath = &quot;user_img&quot;;</div><div class="line">UploadFile uf = getFile(&quot;header&quot;,realpath);</div></pre></td></tr></table></figure></p>
<p>接下来获取其他数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String username = getPara(&quot;username&quot;);</div><div class="line">System.out.println(&quot;username:&quot;+username);</div><div class="line">String email = getPara(&quot;email&quot;);</div><div class="line">System.out.println(&quot;email:&quot;+email);</div></pre></td></tr></table></figure></p>
<h2 id="四、对刚刚已经上传成功的文件进行重命名"><a href="#四、对刚刚已经上传成功的文件进行重命名" class="headerlink" title="四、对刚刚已经上传成功的文件进行重命名"></a>四、对刚刚已经上传成功的文件进行重命名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//首先我们要获取文件的拓展名，所以要把文件原名称进行拆分</div><div class="line">String fileName = file.getName();</div><div class="line">String extName = fileName.substring(fileName.lastIndexOf(&quot;.&quot;)+ 1);	//获取拓展名,按照 &quot;.&quot; 分隔开的最后一个字符串</div><div class="line"></div><div class="line">//接下来，获取刚刚上传的文件的局对路径</div><div class="line">String [] test = file.getPath().split(&quot;user_img&quot;);</div><div class="line">//这里之所以按user_img 进行分割是因为有个bug   如果按照\进行分割，则应写为spilt(&quot;\\&quot;)  但是编译器会解析为按字符串\\进行分割，所以会出现问题</div><div class="line"></div><div class="line">String road = &quot;&quot;;</div><div class="line">		for (int i = 0 ;i &lt; test.length;i++)&#123;</div><div class="line">			if (i == test.length-1)&#123;</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			road += test[i];</div><div class="line">		&#125;</div><div class="line">		road += &quot;user_img\\&quot; + getSessionAttr(&quot;student_id&quot;)+&quot;.&quot; + extName;//我这里按照学号进行命名</div><div class="line"></div><div class="line">//此时road的值为  文件的 绝对路径 + 新名称</div><div class="line">file.renameTo(new File(road));</div></pre></td></tr></table></figure>
<p>这样，简单的单文件、数据上传以及重命名就完成了。</p>
<h3 id="这是我的第一篇博客，欢迎大家批评指正"><a href="#这是我的第一篇博客，欢迎大家批评指正" class="headerlink" title="这是我的第一篇博客，欢迎大家批评指正"></a>这是我的第一篇博客，欢迎大家批评指正</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、表单处理&quot;&gt;&lt;a href=&quot;#一、表单处理&quot; class=&quot;headerlink&quot; title=&quot;一、表单处理&quot;&gt;&lt;/a&gt;一、表单处理&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
    
      <category term="JFinal" scheme="http://liuzhe6.github.io/tags/JFinal/"/>
    
  </entry>
  
</feed>
